
build times have exploded
=========================

	looks like this is because packLib is packaging _everything_, 
	including node_modules folders and such
	this is especially bad at the root

	Okay, but what the _fuck_ can I do about that? 
		Is there some way that I can mask those files off from pacote?

		I can use the "files" entry in the root package.json, seems to be working ...



why is my generated code out-of-date unless I nuke .owndir/build ?
=====================================================================

	HA! it's coming from npm's cache
	which is stored as opaque data in ~/.npm/_cacache
		because of _course_ it is

	solution was to learn a little more about how to configure the npm install
		- set package-lock to false
		- set prefer-online to true

		this way, we check the cache against the source, 
		and ignore the hash that the package-lock.json may or may not remember


Next Steps (med picture)
========================

	1- client-side *directory* support
		file access interfaces
			mediated by permissions
			read, write, move, delete, makeDir

	2- sync client and server directory object
		I need to pass chokidar events up to the client



Loose Ends
==========
	if a folder gets pasted in:
		I rely on the events being delivered in a top-down order
			if they were delivered randomly, I would just _die_
			not sure if I can learn whether or not this is a problem by inspecting chokidar's code?
				might need to inspect *platform* code, which is ... well it's a lot

		I have no mechanism to cascade the existing owndir
			probably I just crash? Something to test later

	hardcoded client.js path

	better solution to bundling fsNode_client.js




how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets



actually working with react is proving unexpectedly painful
===========================================================

	I think, what I'm learning is that I can't just expect things to _work_ on arbitrary terms

	SSR is different from CSR, (and probably React is different from SolidJs),
	and I can't expect things that work well in one to carry across smoothly to another
		and, crucially, it looks like I'm not going to be able to paper over the difference with the build

		So, let's think about what adaptations will be required:

			React-SSR
				- some utility-functions to smuggle in event handlers, maybe

			React-CSR
				- don't make your components async by default

		Alright, that's actually a reasonable answer. I don't _love_ it, but it makes perfect sense.





HTML diff and patch
===================

	this seems like it should be a solved problem, right?
	there must be some existing solution to merge a DOM node into an existing DOM node

	checkout jQuery.load(), this is like 90% of what I care about
	and it's deliciously braindead



crashes and failed compilation
==============================

	I must be able to detect these, right?

	Maybe I need to start fucking around with Babel directly
	


Android?
========


plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @homestead/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @homestead/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/homestead-plugin-utils/postinstall.js my-plugin"


