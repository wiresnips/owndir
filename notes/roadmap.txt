
0. deliver code to client
	let's just ignore directory for a hot minute, and focus on delivering ANY working code to the client 
		- build index.js for the client
			- SOME fucking how, deliver the client output
			- watch it do literally _anything_ in the browser
			- watch it do JSX stuff in the browser


1. re-merge build.js and directory.js

	this should make it a _lot_ easier to build code in a sane way,
	and also to build different code for client vs server ...

	need to re-examine the relationship between ['.central'] and ['.central'].directory


2. expose directory to client
	- files can serve themselves as a stream
	- router exposes files as directly as possible
		GET 	- fetch the file
		DELETE 	- ooof, yeah I want this to be possible
		PUT 	- completely replace the file
		POST 	- append to the end of the file (?) options 
		PATCH	- oooh, now _this_ I like

		- maybe some way for .central to express limits on what can be done?
			I think my default stance is "trust", though, right?

		Okay, reconsidering a little 
			- I can build utilities that make it easy for any given .central to expose that functionality, 
			- BUT, that's the way to expose files. Full stop.


3. draft up a plugin that can handle react 
	- provide a custom template engine that does something useful with jsx
	- how the fuck am I going to handle view template directories?


4. decide how plugins operate
	- plugins are functions that take and return a module
	- plugins are used by CALLING THEM DIRECTLY ON YOUR MODULE, YOURSELF


5. incorporate plugins into BUILD












Plugins

	how do they work?
		function takes and returns a module, stack that shit like middleware

		Have to be careful to return the SAME object, otherwise we could break the prototype chain

			Or, maybe just don't use the return value, to be safe



	how are they INCORPORATED ?

		- need to relate them to the build

		- need to require and run them in `index.js`


	




Client-side code

	how the fuck do I want to do THIS?

	Seems like the kinda thing that ought to live in a plugin, but it'll need support from Build




Remote Access

	Actually, I think that we don't _need_ remote access 
		just run this out of a dropbox folder and put up a local server

		Or a fuckin' git repo, who cares

		Point is, I don't have to fuck around with making ONE server public, I can just use existing filesync tools for distribution



