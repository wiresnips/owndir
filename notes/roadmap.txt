



File Change Events
==================

	these are just kinda fuckey no matter how I slice it
		REALLY not happy with the handwave I have in the direction of listeners

	needs a built-in client-side solution



Permissions
===========

	currently, these are stubbed



Process Management + Code Reloading
===================================

	https://stackoverflow.com/questions/16369018/forever-nodemon-running-together

	not actually sure if I _need_ this, but it's something to think about.

	for now, I think I'll just run it directly



Android?
========





__dirname
=========
	currently points to the BUILD folder, not the actual folder
	also, the plugin that's managing that for me is replacing the STRING, ie

		console.log("__dirname", resolve(__dirname, 'index.html'))

		prints:

		__fileloc.dirname /home/ben/projects/owndir/build/server/module/node_modules/_owndir_plugins_10_react_csr_3/index.html

		because `__dirname` became `__fileloc.dirname`, BUT SO DID `"__dirname"`

	notice that this _kinda_ works SOMETIMES
		static assets included with a plugin will have been copied into build, for example

	but, you could never navigate into the true directory using __dirname



replace Express
=========================================

	the fact that I can't route to a path that contains "(" is a bridge too far
	I don't want to fuck with that shit TODAY, but that's gonna be the next major refactor




plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @owndir/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @owndir/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/owndir-plugin-utils/postinstall.js my-plugin"







Loose Ends
==========

	hardcoded client.js path

	solution to bundling fsNode_client.js
		once I get around to experimenting with a plugin-distribution mechanism, 
		maybe this will get folded into that?

	there might be some shenanigans WRT windows vs posix paths, ie foo/bar/baz vs foo\bar\baz
		because a lot of this shit runs server-side AND client-side, consider normalizing paths to posix
		this might entail replacing `require('path')` with `require('path').posix` everywhere






how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets
	whadaya wanna bet this flows through FsNode somehow?


crashes and failed compilation
==============================

	I must be able to detect these, right?

	Maybe I need to start fucking around with Babel directly
	


