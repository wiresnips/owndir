
TOKEN is broken right now


Component CSS
=============
	consider react-fs-navigator:
		- opening and closing doesn't work without _some_ kind of styling
		- I can inline the styles, but then they can't be overridden

	one answer is, distribute that shit as plugins after all
	that way, it's a whole folder in a sensible place that I can refer to (ie, by another plugin)

	how do other things do it?
		- material-ui appears to use wholy inline styling, which is going to make it _very_ difficult to override
		  you just have to theme it on _it's_ terms, with its system

		I kinda hate that ...

	


WYSIWYG admin console and plugin manager
========================================

	yeah, I should be able to create a (large, ugly) _component_ that allows this
		- plugin manager that downloads and install plugins
		- code editor with preview iframe (!!!)
		

First-Time Launch
=================

	I need some kind of a _default_ setup, where if you just run OwnDir out of an empty directory, 
	you get an intelligent demonstration of what things are, how they work, etc

	Oooooh nooo ....

	yeah, I have to build this
	no _fuckin_ idea how I _want_ to build it, but I need to, don't I?


Permissions
===========

	currently, these are stubbed

	also the stubs are synchronous, which is clearly incorrect


Build Invalidation
========================
	if .owndir/* changes, this should force a build



Relative Import Paths
=====================

	currently, modules cannot relatively import files from OUTSIDE themselves
	(including relatively importing something from another module)

	This is surprising enough that it might be a problem
	But, i'm not sure what the solution could be, short of detecting and rewriting the import ...

	I think this is work to circle back to if/when I look at things like directly incorporating Babel
	(ie, for things like detecting build failures)

	- DOUBLE-CHECK this, switching to webpack might have fixed it?



replace Express
=========================================

	the fact that I can't route to a path that contains "(" is a bridge too far
	I don't want to fuck with that shit TODAY, but that's gonna be the next major refactor



plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @owndir/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @owndir/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/owndir-plugin-utils/postinstall.js my-plugin"


	see also: First-Time Launch
		if I build a _component_ that exposes a WYSIWYG configuration feature, that would go
		a LONG fuckin' way towards solving this problem





Loose Ends
==========

	hardcoded client.js path

	solution to bundling fsNode_client.js
		once I get around to experimenting with a plugin-distribution mechanism, 
		maybe this will get folded into that?

	there might be some shenanigans WRT windows vs posix paths, ie foo/bar/baz vs foo\bar\baz
		because a lot of this shit runs server-side AND client-side, consider normalizing paths to posix
		this might entail replacing `require('path')` with `require('path').posix` everywhere

	Current client-side fsNode.write assumed that `fetch` could send ReadableStreams, 
		which ranges between flatly false in firefox to barely true in chrome


browser-specfic values are not stubbed in the server
====================================================

if you use `window.location.host` to get the current url, from a _module_, this will CRASH THE SERVER
	I'm a fuckin' genius
	this is apparent and confusing if you reference it from the root - if you reference it from inside a function that's never called server-side, everything's fine



how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets
	whadaya wanna bet this flows through FsNode somehow?


crashes and failed compilation
==============================

	I must be able to detect these, right?

	Maybe I need to start fucking around with Babel directly
	




