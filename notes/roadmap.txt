

Next Steps (med picture)
========================

	1- client-side _routing_
		this is a *lot* more react-specific, but there's probably adjacent notions in the other reactive frameworks, right?
			yeah, seems like "routing" is a pretty universal problem to solve

	2- client-side *directory* support
		file access interfaces
			mediated by permissions
			read, write, move, delete, makeDir

	3- sync client and server directory object
		I need to pass chokidar events up to the client



Loose Ends
==========
	if a folder gets pasted in:
		I rely on the events being delivered in a top-down order
			if they were delivered randomly, I would just _die_
			not sure if I can learn whether or not this is a problem by inspecting chokidar's code?
				might need to inspect *platform* code, which is ... well it's a lot

		I have no mechanism to cascade the existing owndir
			probably I just crash? Something to test later

	hardcoded client.js path

	better solution to bundling fsNode_client.js




how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets





HTML diff and patch
===================

	this seems like it should be a solved problem, right?
	there must be some existing solution to merge a DOM node into an existing DOM node

	checkout jQuery.load(), this is like 90% of what I care about
	and it's deliciously braindead



crashes and failed compilation
==============================

	I must be able to detect these, right?

	

why is my generated code out-of-date unless I nuke .homestead-build ?
=====================================================================


Android?
========


plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @homestead/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @homestead/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/homestead-plugin-utils/postinstall.js my-plugin"


