
Next Steps
==========
	1- build client-facing JS (again)
		force that shit up to the client, hardcode _everything_
		we can sort out sane architecture later, we need to prove the point first

	2- client-side *directory* support
		2.1- directory routers need to serve content
			directory skeleton
			file access interfaces
				mediated by permissions
				read, write, move, delete, makeDir
		2.2- client loads directory data, spawns client-side owndir

	3- client-side _routing_
		this is a *lot* more react-specific, but there's probably adjacent notions in the other reactive frameworks, right?
			yeah, seems like "routing" is a pretty universal problem to solve

	4- sync client and server directory object
		I need to pass chokidar events up to the client

	5- fill out the _rest_ of the fsNode interface

	6- BYO-build-script
		I want to support alternate reactive frameworks
		but, I cannot worry about that yet - just do react for now, we can readjust once we have more working code hammered out




Loose Ends
==========
	if a folder gets pasted in:
		I rely on the events being delivered in a top-down order
			if they were delivered randomly, I would just _die_
			not sure if I can learn whether or not this is a problem by inspecting chokidar's code?
				might need to inspect *platform* code, which is ... well it's a lot

		I have no mechanism to cascade the existing owndir
			probably I just crash? Something to test later








Alternative Frameworks
======================

	I _really_ like the look of solidJS
	and, I see that there's ways to run Vue through esbuild as well

	Once we're satisfied that React is doing the things that it ought to do, (or that it CAN'T ... ssr script tags)
	might be worth taking a look at making alternatives possible

	Although, I'm confident that mix-&-match will never be possible, so it'd immediately fragment front-end plugins


how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets





HTML diff and patch
===================

	this seems like it should be a solved problem, right?
	there must be some existing solution to merge a DOM node into an existing DOM node

	checkout jQuery.load(), this is like 90% of what I care about
	and it's deliciously braindead



crashes and failed compilation
==============================

	I must be able to detect these, right?

	

why is my generated code out-of-date unless I nuke .homestead-build ?
=====================================================================


Android?
========


plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @homestead/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @homestead/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/homestead-plugin-utils/postinstall.js my-plugin"


