

how to deal with filesystem updates?
====================================

	I need a way to recreate the routers
	------------------------------------
		the plan here is, get them into a more _structured_ form, and then we can safely manipulate the router's stack

		I need to wrap H.middleware and H.routes, and H.children into routers of their own
		that way, for myself, I will only have three routes: "middleware", "children", and "routes"

		with this setup, I can re-create the middleware and routes, while leaving the child routes untouched

		wait, shit - that would probably work, except for the fact that the children also need to be recreated, because they can navigate the whole tree


	WAIT. SHIT.
		every child can navigate the whole directory structure
		that means, whenever ANY file changes, EVERY homestead MUST be rebuilt
		unless, I can find some way to update the values without torpedoing the references ...

	Okay, let's look at building what we need, from scratch, every time
		(it's not like server state is worth that much anyways, no-one else can use it)

		So, every homestead gets wrapped into something that BECOMES a constructor function
		and, those constructor functions get composed ... somehow ...


	I think that the game here is, mitigation
		1- limit what is recreated
			ie, when there are changes, I only rebuild the PATH along which those changes occurred
			(technically you CAN depend on sibling folders, but I won't honor it)

			notice that this will STILL nuke the heirarchy of _everything_, because I'll rebuild the root every time
			so be it, then.

		2- make recreation easier
			proactively wrap nodes as constructors

			attach the routers directly to homestead.H (?)

			utilities to splice updates into and out of the tree


let's refocus the "main tree" on the directory instead of the homestead
	- don't inject directory into homestead, inject homestead into directory
	- don't assemble the tree of homestead in build-server, do it as directories are updated


-------

Okay, I don't hate where this refactor has brought me, but I also kinda just want to say "fuck it"
it's easy enough to establish a convention that says "if you want to react to changes, don't read the files on construction"

Upside, this means that we ... don't have to care about rebuilding ANYTHING

	and, I can give directory an addListener function, so homesteads that want to can STILL do the thing
	


alright, this is starting to get somewhere
	1- never rebuild ANYTHING
	2- addListener on fsNode so that homesteads can respond to file changes
	3- how the FUCK do I want to respond to adding/deleting directories wholesale?
		- nope, just don't ever try to rebuild code 
			notice that, I don't know when changes in a .homestead directory ARE code-changes
			could be, a cache being updated, for example









HTML diff and patch
===================

	this seems like it should be a solved problem, right?
	there must be some existing solution to merge a DOM node into an existing DOM node

	checkout jQuery.load(), this is like 90% of what I care about
	and it's deliciously braindead



crashes and failed compilation
==============================

	I must be able to detect these, right?

	

why is my generated code out-of-date unless I nuke .homestead-build ?
=====================================================================


Android?
========


plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @homestead/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @homestead/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/homestead-plugin-utils/postinstall.js my-plugin"




better management of route priority
===================================

	if plugins are going to be providing functionality by adding routes (and they are)

	then, I need some way for them to play nicely with each other

	for NOW, I can do this with plugin names (because I am the only one writing anything)




name ideas
==========

	OwnDir
		- pronounced "wonder" ?

	homestead
		- competing service
		- ancaps, bleah

	central
		- probably impossible to google

	bradford

	croft
	planterbox
	jardinier
