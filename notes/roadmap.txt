
React renderToString strips out event-handlers
==============================================
	
	FUUUUCK MEEEE

	this was _kind of_ an issue anyways, but SHIT - didn't think it was this bad
	figured I could inject code that ran in the client scope instead of the local

		but NOOoooOOOOOooooOOO

	So, what fucking now, asswipe?

		abandon react ... ?

		embrace CSR ... ?






how to deal with static assets?
===============================

	I want some easy way for plugins to declare, and then make use of, static assets



how to deal with filesystem updates?
====================================

	1- never rebuild the modules
	2- addListener on fsNode so that homesteads can respond to file changes
	3- how the FUCK do I want to respond to adding/deleting directories wholesale?
		- nope, just don't ever try to rebuild code 
			notice that, I don't know when changes in a .homestead directory ARE code-changes
			could be, eg, a cache being updated






HTML diff and patch
===================

	this seems like it should be a solved problem, right?
	there must be some existing solution to merge a DOM node into an existing DOM node

	checkout jQuery.load(), this is like 90% of what I care about
	and it's deliciously braindead



crashes and failed compilation
==============================

	I must be able to detect these, right?

	

why is my generated code out-of-date unless I nuke .homestead-build ?
=====================================================================


Android?
========


plugin distribution mechanism
=============================
	a postinstall script that moves the plugin from node_modules up a level

	then, you can `npm install @homestead/fancy-plugin`, and it'll just work, I think ...

	can I get this working cross-platform?
		the way to do this is, to use javascript instead of bash

		so, let's imagine a package, @homestead/plugin-utils
		plugins can require it, and it will provide a postinstall.js script

		then, in package.json, you have this:
			"postinstall": "node node_modules/homestead-plugin-utils/postinstall.js my-plugin"




better management of route priority
===================================

	if plugins are going to be providing functionality by adding routes (and they are)

	then, I need some way for them to play nicely with each other

	for NOW, I can do this with plugin names (because I am the only one writing anything)




name ideas
==========

	OwnDir
		- pronounced "wonder" ?

	homestead
		- competing service
		- ancaps, bleah

	central
		- probably impossible to google

	bradford

	croft
	planterbox
	jardinier
