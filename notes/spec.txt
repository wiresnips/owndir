


Let's just keep track of specific calls that we've made so far


Build:
	- central.js is the build target
	- index.js is used to tie modules together
	- each module is built into a parallel temp directory tree
		- ie, ~/example/foo/.central will become: 
			/tmp/tmp-123/example/foo/.central/central.js - the individual module
			/tmp/tmp-123/example/foo/.central/index.js   - module merged into children and parents
			/tmp/tmp-123/example/foo/.central/plugins/*  - the plugins also get built to here


Build Function:
	(src, dst) => {
		// the actual build function 
		// 	- src is the path to the entry point of whatever we're building
		// 		can be an exact path, or a directory
		//	- dst is the path at which to place the build output

		// return falsey if the build didn't work for whatever reason, 
		// and the next buildFn will be tried
	}


Module Structure: 

	{
		// this is where I'm going to keep all of *my* keys
		'.central': {

			root: {
				/* the root module */
			},

			parent: {
				/* the parent module (if not root) */
			},


			children: {

				// child modules (not including .central folders)
				'<directory-name>': {
					/* the child module */
				},
			}, 

			// I kinda think that `children` and `directory` can be collapsed into one

			directory: {
				/* the DIRECTORY node */
			}




			// ROUTING
			// routes are given in the following structure:
			//		an ordered list of pairs, 
			// 			first element (key) is the route path - see https://expressjs.com/en/guide/routing.html#route-paths
			//			second element (value) is ALSO an ordered list of pairs,
			//				key is the METHOD - see https://expressjs.com/en/5x/api.html#routing-methods
			//				value is the handler - (req, res, next) => { /* request handler */ }

			// there are TWO keys to establish routes - `middleware` and `routes`
			// the only difference between these is priority, and _intended_ meaning
			//		- middleware is applied BEFORE child routes
			// 		- routes are applied AFTER child routes

			middleware: [
				['*', [
					['<method (usually "all")>', (req, res, next) => { 
						/* middleware handler */ 
						next();
					}],
				]],
			],

			routes: [
				['/any/given/path', [
					['<method>': (req, res, next) => { 
						/* route handler */ 
					}],
				]],
			],


			// only applicable to the root node.
			// used to configure the express Application
			app: {
				engine: {
					ext: someEngine
				}
				set: {
					key: value
				}
			}

		}
	}


Directory Structure: 

	{
		name: 'the name of the file or dir',
		path: '/the/absolute/path/to/the/file/or/dir',
		absolutePath: '/the/absolute/path/to/the/file/or/dir', // synonym to 'path'
		relativePath: 'path/to/the/node/from/the/root',

		root: {
			/* the root node (of the central server), not the filesystem */
		},

		parent: {
			/* the parent node, if any */
		},

		children: {
			/* if a directory, any child nodes keyed by name */
		}

		// basically a dump of the stat object
		isFile: true/false,
		isDirectory: true/false,
		isSymbolicLink: true/false,

		// https://nodejs.org/api/fs.html#stat-time-values
		atime: number, // access time
		mtime: number, // modify time
		ctime: number, // change time

		// if a file, the size
		// if a directory, the aggregate size of the contents
		size: 9001,

		// a shortcut to fs/promises open function, preloaded with the absolute path
		open: async (...args) => filehandle,

		text: async (encoding?) => "file body, as text"

	}
