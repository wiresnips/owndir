
Let's reimagine this project with React as the base ...



That basically answers my "how do I template" question - MOSTLY

I've got the content now - do I want a way to specify a frame?

IE, what am I going to inject the content into? 




Okay, so if we imagine some kind of framing device that our component is going to get plugged into,
Then we can think about how we plug into it

I'm thinking to myself that I can return multiple components as an object,
ie:

{
	main: some-component,
	header: some-component,
	footer: some-component
}


Although that might not actually solve a problem I have ....




Okay, so we've got the idea that we process a `.central` file/folder, and it gives us an object back

And we use that object to render an HTML view of the folder, and also of any 'child' folders

So far so good.




	How do we relate parent and child folders?
		eg, we could have each be a function that accepts the parent's object, and returns the child's

	How do we actually _do_ the render?
		- for each key in the object, make it available in scope as a function
		- run the 'render' function once with all of them?





Okay, it looks like I can use Babel directly - see central.js for an crude example

it also looks like I might be able to use 'vm' (nodejs built-in) to run the code is a separate context as modules ...

	see: https://github.com/pierrec/node-eval








So, I'm going to create a module, which exports some functions,

I'm going to import that module into a context,

and then I'm going to run the 'html' function with no args

and whatever is produced, that's my output


And then, when I eval the children, they'll inherit the context of the parents (which they can stomp if they want to ...)






=================================



Alright - that appears to be working